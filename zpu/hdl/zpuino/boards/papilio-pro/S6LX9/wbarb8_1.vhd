-- 
-- DO NOT HAND EDIT!  This file was generated by ackley on Sun Jul 21 00:35:57 2013 via:
-- ./wbarbN_1.vhd.pl 8
--

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;
use ieee.std_logic_unsigned.all;
library work;
use work.zpu_config.all;

entity wbarb8_1 is
  generic (
    ADDRESS_HIGH: integer := maxIObit;
    ADDRESS_LOW: integer := minIObit
  );
  port (
    wb_clk_i: in std_logic;
	 	wb_rst_i: in std_logic;

    -- Master 0 signals

    m0_wb_dat_o: out std_logic_vector(31 downto 0);
    m0_wb_dat_i: in std_logic_vector(31 downto 0);
    m0_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m0_wb_sel_i: in std_logic_vector(3 downto 0);
    m0_wb_cti_i: in std_logic_vector(2 downto 0);
    m0_wb_we_i:  in std_logic;
    m0_wb_cyc_i: in std_logic;
    m0_wb_stb_i: in std_logic;
    m0_wb_stall_o: out std_logic;
    m0_wb_ack_o: out std_logic;

    -- Master 1 signals

    m1_wb_dat_o: out std_logic_vector(31 downto 0);
    m1_wb_dat_i: in std_logic_vector(31 downto 0);
    m1_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m1_wb_sel_i: in std_logic_vector(3 downto 0);
    m1_wb_cti_i: in std_logic_vector(2 downto 0);
    m1_wb_we_i:  in std_logic;
    m1_wb_cyc_i: in std_logic;
    m1_wb_stb_i: in std_logic;
    m1_wb_stall_o: out std_logic;
    m1_wb_ack_o: out std_logic;

    -- Master 2 signals

    m2_wb_dat_o: out std_logic_vector(31 downto 0);
    m2_wb_dat_i: in std_logic_vector(31 downto 0);
    m2_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m2_wb_sel_i: in std_logic_vector(3 downto 0);
    m2_wb_cti_i: in std_logic_vector(2 downto 0);
    m2_wb_we_i:  in std_logic;
    m2_wb_cyc_i: in std_logic;
    m2_wb_stb_i: in std_logic;
    m2_wb_stall_o: out std_logic;
    m2_wb_ack_o: out std_logic;

    -- Master 3 signals

    m3_wb_dat_o: out std_logic_vector(31 downto 0);
    m3_wb_dat_i: in std_logic_vector(31 downto 0);
    m3_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m3_wb_sel_i: in std_logic_vector(3 downto 0);
    m3_wb_cti_i: in std_logic_vector(2 downto 0);
    m3_wb_we_i:  in std_logic;
    m3_wb_cyc_i: in std_logic;
    m3_wb_stb_i: in std_logic;
    m3_wb_stall_o: out std_logic;
    m3_wb_ack_o: out std_logic;

    -- Master 4 signals

    m4_wb_dat_o: out std_logic_vector(31 downto 0);
    m4_wb_dat_i: in std_logic_vector(31 downto 0);
    m4_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m4_wb_sel_i: in std_logic_vector(3 downto 0);
    m4_wb_cti_i: in std_logic_vector(2 downto 0);
    m4_wb_we_i:  in std_logic;
    m4_wb_cyc_i: in std_logic;
    m4_wb_stb_i: in std_logic;
    m4_wb_stall_o: out std_logic;
    m4_wb_ack_o: out std_logic;

    -- Master 5 signals

    m5_wb_dat_o: out std_logic_vector(31 downto 0);
    m5_wb_dat_i: in std_logic_vector(31 downto 0);
    m5_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m5_wb_sel_i: in std_logic_vector(3 downto 0);
    m5_wb_cti_i: in std_logic_vector(2 downto 0);
    m5_wb_we_i:  in std_logic;
    m5_wb_cyc_i: in std_logic;
    m5_wb_stb_i: in std_logic;
    m5_wb_stall_o: out std_logic;
    m5_wb_ack_o: out std_logic;

    -- Master 6 signals

    m6_wb_dat_o: out std_logic_vector(31 downto 0);
    m6_wb_dat_i: in std_logic_vector(31 downto 0);
    m6_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m6_wb_sel_i: in std_logic_vector(3 downto 0);
    m6_wb_cti_i: in std_logic_vector(2 downto 0);
    m6_wb_we_i:  in std_logic;
    m6_wb_cyc_i: in std_logic;
    m6_wb_stb_i: in std_logic;
    m6_wb_stall_o: out std_logic;
    m6_wb_ack_o: out std_logic;

    -- Master 7 signals

    m7_wb_dat_o: out std_logic_vector(31 downto 0);
    m7_wb_dat_i: in std_logic_vector(31 downto 0);
    m7_wb_adr_i: in std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    m7_wb_sel_i: in std_logic_vector(3 downto 0);
    m7_wb_cti_i: in std_logic_vector(2 downto 0);
    m7_wb_we_i:  in std_logic;
    m7_wb_cyc_i: in std_logic;
    m7_wb_stb_i: in std_logic;
    m7_wb_stall_o: out std_logic;
    m7_wb_ack_o: out std_logic;

    -- Slave signals

    s0_wb_dat_i: in std_logic_vector(31 downto 0);
    s0_wb_dat_o: out std_logic_vector(31 downto 0);
    s0_wb_adr_o: out std_logic_vector(ADDRESS_HIGH downto ADDRESS_LOW);
    s0_wb_sel_o: out std_logic_vector(3 downto 0);
    s0_wb_cti_o: out std_logic_vector(2 downto 0);
    s0_wb_we_o:  out std_logic;
    s0_wb_cyc_o: out std_logic;
    s0_wb_stb_o: out std_logic;
    s0_wb_ack_i: in std_logic;
    s0_wb_stall_i: in std_logic
  );
end entity wbarb8_1;



architecture behave of wbarb8_1 is

signal current_master : integer range 0 to 7;
signal next_master : integer range 0 to 7;
begin

process(wb_clk_i)
begin
  if rising_edge(wb_clk_i) then
    if wb_rst_i='1' then
      current_master <= 0;
    else
      current_master <= next_master;
    end if;
  end if;
end process;


process(current_master, m0_wb_cyc_i, m1_wb_cyc_i, m2_wb_cyc_i, m3_wb_cyc_i, m4_wb_cyc_i, m5_wb_cyc_i, m6_wb_cyc_i, m7_wb_cyc_i)
begin
  next_master <= current_master;

  case current_master is
    when 0 =>
      if m0_wb_cyc_i='0' then
        if m1_wb_cyc_i='1' then
          next_master <= 1;
        end if;
      end if;
    when 1 =>
      if m1_wb_cyc_i='0' then
        if m2_wb_cyc_i='1' then
          next_master <= 2;
        end if;
      end if;
    when 2 =>
      if m2_wb_cyc_i='0' then
        if m3_wb_cyc_i='1' then
          next_master <= 3;
        end if;
      end if;
    when 3 =>
      if m3_wb_cyc_i='0' then
        if m4_wb_cyc_i='1' then
          next_master <= 4;
        end if;
      end if;
    when 4 =>
      if m4_wb_cyc_i='0' then
        if m5_wb_cyc_i='1' then
          next_master <= 5;
        end if;
      end if;
    when 5 =>
      if m5_wb_cyc_i='0' then
        if m6_wb_cyc_i='1' then
          next_master <= 6;
        end if;
      end if;
    when 6 =>
      if m6_wb_cyc_i='0' then
        if m7_wb_cyc_i='1' then
          next_master <= 7;
        end if;
      end if;
    when 7 =>
      if m7_wb_cyc_i='0' then
        if m0_wb_cyc_i='1' then
          next_master <= 0;
        end if;
      end if;
    when others =>
  end case;
end process;

-- Muxers for slave

process(current_master,
        m0_wb_dat_i, m0_wb_adr_i, m0_wb_sel_i, m0_wb_cti_i, m0_wb_we_i, m0_wb_cyc_i, m0_wb_stb_i,
        m1_wb_dat_i, m1_wb_adr_i, m1_wb_sel_i, m1_wb_cti_i, m1_wb_we_i, m1_wb_cyc_i, m1_wb_stb_i,
        m2_wb_dat_i, m2_wb_adr_i, m2_wb_sel_i, m2_wb_cti_i, m2_wb_we_i, m2_wb_cyc_i, m2_wb_stb_i,
        m3_wb_dat_i, m3_wb_adr_i, m3_wb_sel_i, m3_wb_cti_i, m3_wb_we_i, m3_wb_cyc_i, m3_wb_stb_i,
        m4_wb_dat_i, m4_wb_adr_i, m4_wb_sel_i, m4_wb_cti_i, m4_wb_we_i, m4_wb_cyc_i, m4_wb_stb_i,
        m5_wb_dat_i, m5_wb_adr_i, m5_wb_sel_i, m5_wb_cti_i, m5_wb_we_i, m5_wb_cyc_i, m5_wb_stb_i,
        m6_wb_dat_i, m6_wb_adr_i, m6_wb_sel_i, m6_wb_cti_i, m6_wb_we_i, m6_wb_cyc_i, m6_wb_stb_i,
        m7_wb_dat_i, m7_wb_adr_i, m7_wb_sel_i, m7_wb_cti_i, m7_wb_we_i, m7_wb_cyc_i, m7_wb_stb_i)
begin
  case current_master is
    when 0 =>
      s0_wb_dat_o <= m0_wb_dat_i;
      s0_wb_adr_o <= m0_wb_adr_i;
      s0_wb_sel_o <= m0_wb_sel_i;
      s0_wb_cti_o <= m0_wb_cti_i;
      s0_wb_we_o  <= m0_wb_we_i;
      s0_wb_cyc_o <= m0_wb_cyc_i;
      s0_wb_stb_o <= m0_wb_stb_i;
    when 1 =>
      s0_wb_dat_o <= m1_wb_dat_i;
      s0_wb_adr_o <= m1_wb_adr_i;
      s0_wb_sel_o <= m1_wb_sel_i;
      s0_wb_cti_o <= m1_wb_cti_i;
      s0_wb_we_o  <= m1_wb_we_i;
      s0_wb_cyc_o <= m1_wb_cyc_i;
      s0_wb_stb_o <= m1_wb_stb_i;
    when 2 =>
      s0_wb_dat_o <= m2_wb_dat_i;
      s0_wb_adr_o <= m2_wb_adr_i;
      s0_wb_sel_o <= m2_wb_sel_i;
      s0_wb_cti_o <= m2_wb_cti_i;
      s0_wb_we_o  <= m2_wb_we_i;
      s0_wb_cyc_o <= m2_wb_cyc_i;
      s0_wb_stb_o <= m2_wb_stb_i;
    when 3 =>
      s0_wb_dat_o <= m3_wb_dat_i;
      s0_wb_adr_o <= m3_wb_adr_i;
      s0_wb_sel_o <= m3_wb_sel_i;
      s0_wb_cti_o <= m3_wb_cti_i;
      s0_wb_we_o  <= m3_wb_we_i;
      s0_wb_cyc_o <= m3_wb_cyc_i;
      s0_wb_stb_o <= m3_wb_stb_i;
    when 4 =>
      s0_wb_dat_o <= m4_wb_dat_i;
      s0_wb_adr_o <= m4_wb_adr_i;
      s0_wb_sel_o <= m4_wb_sel_i;
      s0_wb_cti_o <= m4_wb_cti_i;
      s0_wb_we_o  <= m4_wb_we_i;
      s0_wb_cyc_o <= m4_wb_cyc_i;
      s0_wb_stb_o <= m4_wb_stb_i;
    when 5 =>
      s0_wb_dat_o <= m5_wb_dat_i;
      s0_wb_adr_o <= m5_wb_adr_i;
      s0_wb_sel_o <= m5_wb_sel_i;
      s0_wb_cti_o <= m5_wb_cti_i;
      s0_wb_we_o  <= m5_wb_we_i;
      s0_wb_cyc_o <= m5_wb_cyc_i;
      s0_wb_stb_o <= m5_wb_stb_i;
    when 6 =>
      s0_wb_dat_o <= m6_wb_dat_i;
      s0_wb_adr_o <= m6_wb_adr_i;
      s0_wb_sel_o <= m6_wb_sel_i;
      s0_wb_cti_o <= m6_wb_cti_i;
      s0_wb_we_o  <= m6_wb_we_i;
      s0_wb_cyc_o <= m6_wb_cyc_i;
      s0_wb_stb_o <= m6_wb_stb_i;
    when 7 =>
      s0_wb_dat_o <= m7_wb_dat_i;
      s0_wb_adr_o <= m7_wb_adr_i;
      s0_wb_sel_o <= m7_wb_sel_i;
      s0_wb_cti_o <= m7_wb_cti_i;
      s0_wb_we_o  <= m7_wb_we_i;
      s0_wb_cyc_o <= m7_wb_cyc_i;
      s0_wb_stb_o <= m7_wb_stb_i;
    when others =>
      null;
  end case;
end process;

-- Muxers/sel for masters

m0_wb_dat_o <= s0_wb_dat_i;
m1_wb_dat_o <= s0_wb_dat_i;
m2_wb_dat_o <= s0_wb_dat_i;
m3_wb_dat_o <= s0_wb_dat_i;
m4_wb_dat_o <= s0_wb_dat_i;
m5_wb_dat_o <= s0_wb_dat_i;
m6_wb_dat_o <= s0_wb_dat_i;
m7_wb_dat_o <= s0_wb_dat_i;

-- Ack

m0_wb_ack_o <= s0_wb_ack_i when current_master=0 else '0';
m0_wb_stall_o <= s0_wb_stall_i when current_master=0 else '1';
m1_wb_ack_o <= s0_wb_ack_i when current_master=1 else '0';
m1_wb_stall_o <= s0_wb_stall_i when current_master=1 else '1';
m2_wb_ack_o <= s0_wb_ack_i when current_master=2 else '0';
m2_wb_stall_o <= s0_wb_stall_i when current_master=2 else '1';
m3_wb_ack_o <= s0_wb_ack_i when current_master=3 else '0';
m3_wb_stall_o <= s0_wb_stall_i when current_master=3 else '1';
m4_wb_ack_o <= s0_wb_ack_i when current_master=4 else '0';
m4_wb_stall_o <= s0_wb_stall_i when current_master=4 else '1';
m5_wb_ack_o <= s0_wb_ack_i when current_master=5 else '0';
m5_wb_stall_o <= s0_wb_stall_i when current_master=5 else '1';
m6_wb_ack_o <= s0_wb_ack_i when current_master=6 else '0';
m6_wb_stall_o <= s0_wb_stall_i when current_master=6 else '1';
m7_wb_ack_o <= s0_wb_ack_i when current_master=7 else '0';
m7_wb_stall_o <= s0_wb_stall_i when current_master=7 else '1';

end behave;
